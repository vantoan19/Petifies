syntax = "proto3";

option go_package = "github.com/vantoan19/Petifies/proto/post-service/v1";

import "common/common.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message CreatePostRequest {
    string author_id = 1 [(validate.rules).string.uuid = true];
    string visibility = 2;
    string actitivty = 3;
    string content = 4;
    repeated Image images = 5;
    repeated Video videos = 6;
}

message CreateCommentRequest {
    string post_id = 2 [(validate.rules).string.uuid = true];
    string author_id = 3 [(validate.rules).string.uuid = true];
    string parent_id = 4 [(validate.rules).string.uuid = true];
    bool is_post_parent = 5;
    string content = 6;
    Image image = 7;
    Video video = 8;
}

message EditCommentRequest {
    string id = 1 [(validate.rules).string.uuid = true];
    string content = 3;
    Image image = 4;
    Video video = 5;
}

message EditPostRequest {
    string id = 1 [(validate.rules).string.uuid = true];
    string visibility = 2;
    string activity = 3;
    string content = 4;
    repeated Image images = 5;
    repeated Video videos = 6;
}

message ListCommentsRequest {
    repeated string comment_ids = 1;
}

message ListCommentsResponse {
    repeated Comment comments = 1;
}

message ListPostsRequest {
    repeated string post_ids = 1;
}

message ListPostsResponse {
    repeated Post posts = 1;
}

message LoveReactRequest {
    string target_id = 1 [(validate.rules).string.uuid = true];
    string author_id = 2 [(validate.rules).string.uuid = true];
    bool is_target_post = 3;
}

message RemoveLoveReactRequest {
    string target_id = 1 [(validate.rules).string.uuid = true];
    string author_id = 2 [(validate.rules).string.uuid = true];
    bool is_target_post = 3;
}

message RemoveLoveReactResponse {}

message GetLoveCountRequest {
    string target_id = 1 [(validate.rules).string.uuid = true];
    bool is_post_target = 2;
}

message GetLoveCountReponse {
    int32 count = 1;
}

message GetCommentCountRequest {
    string parent_id = 1 [(validate.rules).string.uuid = true];
    bool is_post_parent = 2;
}

message GetCommentCountReponse {
    int32 count = 1;
}

message GetPostRequest {
    string post_id = 1 [(validate.rules).string.uuid = true];
}

message GetCommentRequest {
    string comment_id = 1 [(validate.rules).string.uuid = true];
}

message GetLoveRequest {
    string author_id = 1 [(validate.rules).string.uuid = true];
    string target_id = 2 [(validate.rules).string.uuid = true];
}

message ListCommentIDsByParentIDRequest {
    string parent_id = 1 [(validate.rules).string.uuid = true];
    int32 page_size = 2;
    string after_comment_id = 3;
}

message ListCommentIDsByParentIDResponse {
    repeated string comment_ids = 1;
    string next_page_token = 2;
}

message ListCommentAncestorsRequest {
    string comment_id = 1 [(validate.rules).string.uuid = true];
}

message ListCommentAncestorsResponse {
    repeated Comment ancestor_comments = 1;
}

service PostService {
    rpc CreatePost(CreatePostRequest) returns (Post) {}
    rpc CreateComment(CreateCommentRequest) returns (Comment) {}
    rpc LoveReact(LoveReactRequest) returns (Love) {}
    rpc RemoveLoveReact(RemoveLoveReactRequest) returns (RemoveLoveReactResponse) {}
    rpc EditPost(EditPostRequest) returns (Post) {}
    rpc EditComment(EditCommentRequest) returns (Comment) {}
    rpc ListComments(ListCommentsRequest) returns (ListCommentsResponse) {}
    rpc ListPosts(ListPostsRequest) returns (ListPostsResponse) {}
    rpc GetLoveCount (GetLoveCountRequest) returns (GetLoveCountReponse) {}
    rpc GetCommentCount (GetCommentCountRequest) returns (GetCommentCountReponse) {}
    rpc GetPost(GetPostRequest) returns (Post) {}
    rpc GetLove(GetLoveRequest) returns (Love) {}
    rpc ListCommentIDsByParentID(ListCommentIDsByParentIDRequest) returns (ListCommentIDsByParentIDResponse) {}
    rpc GetComment(GetCommentRequest) returns (Comment) {}
    rpc ListCommentAncestors(ListCommentAncestorsRequest) returns (ListCommentAncestorsResponse) {}
}